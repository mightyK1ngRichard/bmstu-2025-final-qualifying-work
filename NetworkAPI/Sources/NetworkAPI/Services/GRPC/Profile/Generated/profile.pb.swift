// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: profile.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ############### GetUserInfo ############### 
struct Profile_GetUserInfoRes: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userInfo: Profile_UserInfo {
    get {return _userInfo ?? Profile_UserInfo()}
    set {_userInfo = newValue}
  }
  /// Returns true if `userInfo` has been explicitly set.
  var hasUserInfo: Bool {return self._userInfo != nil}
  /// Clears the value of `userInfo`. Subsequent reads from it will return its default value.
  mutating func clearUserInfo() {self._userInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _userInfo: Profile_UserInfo? = nil
}

/// ############### GetUserInfoByID ############### 
struct Profile_GetUserInfoByIDReq: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Profile_GetUserInfoByIDRes: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var user: Profile_Profile {
    get {return _user ?? Profile_Profile()}
    set {_user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return self._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {self._user = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _user: Profile_Profile? = nil
}

struct Profile_Profile: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var fio: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _fio ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_fio = newValue}
  }
  /// Returns true if `fio` has been explicitly set.
  var hasFio: Bool {return self._fio != nil}
  /// Clears the value of `fio`. Subsequent reads from it will return its default value.
  mutating func clearFio() {self._fio = nil}

  var address: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _address ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_address = newValue}
  }
  /// Returns true if `address` has been explicitly set.
  var hasAddress: Bool {return self._address != nil}
  /// Clears the value of `address`. Subsequent reads from it will return its default value.
  mutating func clearAddress() {self._address = nil}

  var nickname: String = String()

  var imageURL: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _imageURL ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_imageURL = newValue}
  }
  /// Returns true if `imageURL` has been explicitly set.
  var hasImageURL: Bool {return self._imageURL != nil}
  /// Clears the value of `imageURL`. Subsequent reads from it will return its default value.
  mutating func clearImageURL() {self._imageURL = nil}

  var headerImageURL: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _headerImageURL ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_headerImageURL = newValue}
  }
  /// Returns true if `headerImageURL` has been explicitly set.
  var hasHeaderImageURL: Bool {return self._headerImageURL != nil}
  /// Clears the value of `headerImageURL`. Subsequent reads from it will return its default value.
  mutating func clearHeaderImageURL() {self._headerImageURL = nil}

  var mail: String = String()

  var phone: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _phone ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_phone = newValue}
  }
  /// Returns true if `phone` has been explicitly set.
  var hasPhone: Bool {return self._phone != nil}
  /// Clears the value of `phone`. Subsequent reads from it will return its default value.
  mutating func clearPhone() {self._phone = nil}

  var cardNumber: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _cardNumber ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_cardNumber = newValue}
  }
  /// Returns true if `cardNumber` has been explicitly set.
  var hasCardNumber: Bool {return self._cardNumber != nil}
  /// Clears the value of `cardNumber`. Subsequent reads from it will return its default value.
  mutating func clearCardNumber() {self._cardNumber = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _fio: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _address: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _imageURL: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _headerImageURL: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _phone: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _cardNumber: SwiftProtobuf.Google_Protobuf_StringValue? = nil
}

struct Profile_UserInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var user: Profile_Profile {
    get {return _user ?? Profile_Profile()}
    set {_user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return self._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {self._user = nil}

  var cakes: [Cake_PreviewCake] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _user: Profile_Profile? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "profile"

extension Profile_GetUserInfoRes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetUserInfoRes"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userInfo"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._userInfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._userInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Profile_GetUserInfoRes, rhs: Profile_GetUserInfoRes) -> Bool {
    if lhs._userInfo != rhs._userInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Profile_GetUserInfoByIDReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetUserInfoByIDReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userID"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.userID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Profile_GetUserInfoByIDReq, rhs: Profile_GetUserInfoByIDReq) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Profile_GetUserInfoByIDRes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetUserInfoByIDRes"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "user"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._user) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._user {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Profile_GetUserInfoByIDRes, rhs: Profile_GetUserInfoByIDRes) -> Bool {
    if lhs._user != rhs._user {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Profile_Profile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Profile"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "fio"),
    3: .same(proto: "address"),
    4: .same(proto: "nickname"),
    5: .standard(proto: "image_url"),
    6: .standard(proto: "header_image_url"),
    7: .same(proto: "mail"),
    8: .same(proto: "phone"),
    9: .standard(proto: "card_number"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._fio) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._address) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.nickname) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._imageURL) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._headerImageURL) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.mail) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._phone) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._cardNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._fio {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._address {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.nickname.isEmpty {
      try visitor.visitSingularStringField(value: self.nickname, fieldNumber: 4)
    }
    try { if let v = self._imageURL {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._headerImageURL {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    if !self.mail.isEmpty {
      try visitor.visitSingularStringField(value: self.mail, fieldNumber: 7)
    }
    try { if let v = self._phone {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._cardNumber {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Profile_Profile, rhs: Profile_Profile) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._fio != rhs._fio {return false}
    if lhs._address != rhs._address {return false}
    if lhs.nickname != rhs.nickname {return false}
    if lhs._imageURL != rhs._imageURL {return false}
    if lhs._headerImageURL != rhs._headerImageURL {return false}
    if lhs.mail != rhs.mail {return false}
    if lhs._phone != rhs._phone {return false}
    if lhs._cardNumber != rhs._cardNumber {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Profile_UserInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "user"),
    2: .same(proto: "cakes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._user) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.cakes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._user {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.cakes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.cakes, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Profile_UserInfo, rhs: Profile_UserInfo) -> Bool {
    if lhs._user != rhs._user {return false}
    if lhs.cakes != rhs.cakes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
