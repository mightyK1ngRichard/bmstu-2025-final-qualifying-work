//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: profile.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// ############### ProfileService ############### 
///
/// Usage: instantiate `Profile_ProfileServiceClient`, then call methods of this protocol to make API calls.
internal protocol Profile_ProfileServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Profile_ProfileServiceClientInterceptorFactoryProtocol? { get }

  func getUserInfo(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Profile_GetUserInfoRes>

  func getUserInfoByID(
    _ request: Profile_GetUserInfoByIDReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Profile_GetUserInfoByIDReq, Profile_GetUserInfoByIDRes>
}

extension Profile_ProfileServiceClientProtocol {
  internal var serviceName: String {
    return "profile.ProfileService"
  }

  /// Unary call to GetUserInfo
  ///
  /// - Parameters:
  ///   - request: Request to send to GetUserInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getUserInfo(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Profile_GetUserInfoRes> {
    return self.makeUnaryCall(
      path: Profile_ProfileServiceClientMetadata.Methods.getUserInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserInfoInterceptors() ?? []
    )
  }

  /// Unary call to GetUserInfoByID
  ///
  /// - Parameters:
  ///   - request: Request to send to GetUserInfoByID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getUserInfoByID(
    _ request: Profile_GetUserInfoByIDReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Profile_GetUserInfoByIDReq, Profile_GetUserInfoByIDRes> {
    return self.makeUnaryCall(
      path: Profile_ProfileServiceClientMetadata.Methods.getUserInfoByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserInfoByIDInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Profile_ProfileServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Profile_ProfileServiceNIOClient")
internal final class Profile_ProfileServiceClient: Profile_ProfileServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Profile_ProfileServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Profile_ProfileServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the profile.ProfileService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Profile_ProfileServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Profile_ProfileServiceNIOClient: Profile_ProfileServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Profile_ProfileServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the profile.ProfileService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Profile_ProfileServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// ############### ProfileService ############### 
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Profile_ProfileServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Profile_ProfileServiceClientInterceptorFactoryProtocol? { get }

  func makeGetUserInfoCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Profile_GetUserInfoRes>

  func makeGetUserInfoByIDCall(
    _ request: Profile_GetUserInfoByIDReq,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Profile_GetUserInfoByIDReq, Profile_GetUserInfoByIDRes>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Profile_ProfileServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Profile_ProfileServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Profile_ProfileServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeGetUserInfoCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Profile_GetUserInfoRes> {
    return self.makeAsyncUnaryCall(
      path: Profile_ProfileServiceClientMetadata.Methods.getUserInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserInfoInterceptors() ?? []
    )
  }

  internal func makeGetUserInfoByIDCall(
    _ request: Profile_GetUserInfoByIDReq,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Profile_GetUserInfoByIDReq, Profile_GetUserInfoByIDRes> {
    return self.makeAsyncUnaryCall(
      path: Profile_ProfileServiceClientMetadata.Methods.getUserInfoByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserInfoByIDInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Profile_ProfileServiceAsyncClientProtocol {
  internal func getUserInfo(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Profile_GetUserInfoRes {
    return try await self.performAsyncUnaryCall(
      path: Profile_ProfileServiceClientMetadata.Methods.getUserInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserInfoInterceptors() ?? []
    )
  }

  internal func getUserInfoByID(
    _ request: Profile_GetUserInfoByIDReq,
    callOptions: CallOptions? = nil
  ) async throws -> Profile_GetUserInfoByIDRes {
    return try await self.performAsyncUnaryCall(
      path: Profile_ProfileServiceClientMetadata.Methods.getUserInfoByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserInfoByIDInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Profile_ProfileServiceAsyncClient: Profile_ProfileServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Profile_ProfileServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Profile_ProfileServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Profile_ProfileServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getUserInfo'.
  func makeGetUserInfoInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Profile_GetUserInfoRes>]

  /// - Returns: Interceptors to use when invoking 'getUserInfoByID'.
  func makeGetUserInfoByIDInterceptors() -> [ClientInterceptor<Profile_GetUserInfoByIDReq, Profile_GetUserInfoByIDRes>]
}

internal enum Profile_ProfileServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ProfileService",
    fullName: "profile.ProfileService",
    methods: [
      Profile_ProfileServiceClientMetadata.Methods.getUserInfo,
      Profile_ProfileServiceClientMetadata.Methods.getUserInfoByID,
    ]
  )

  internal enum Methods {
    internal static let getUserInfo = GRPCMethodDescriptor(
      name: "GetUserInfo",
      path: "/profile.ProfileService/GetUserInfo",
      type: GRPCCallType.unary
    )

    internal static let getUserInfoByID = GRPCMethodDescriptor(
      name: "GetUserInfoByID",
      path: "/profile.ProfileService/GetUserInfoByID",
      type: GRPCCallType.unary
    )
  }
}

/// ############### ProfileService ############### 
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Profile_ProfileServiceProvider: CallHandlerProvider {
  var interceptors: Profile_ProfileServiceServerInterceptorFactoryProtocol? { get }

  func getUserInfo(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Profile_GetUserInfoRes>

  func getUserInfoByID(request: Profile_GetUserInfoByIDReq, context: StatusOnlyCallContext) -> EventLoopFuture<Profile_GetUserInfoByIDRes>
}

extension Profile_ProfileServiceProvider {
  internal var serviceName: Substring {
    return Profile_ProfileServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetUserInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Profile_GetUserInfoRes>(),
        interceptors: self.interceptors?.makeGetUserInfoInterceptors() ?? [],
        userFunction: self.getUserInfo(request:context:)
      )

    case "GetUserInfoByID":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Profile_GetUserInfoByIDReq>(),
        responseSerializer: ProtobufSerializer<Profile_GetUserInfoByIDRes>(),
        interceptors: self.interceptors?.makeGetUserInfoByIDInterceptors() ?? [],
        userFunction: self.getUserInfoByID(request:context:)
      )

    default:
      return nil
    }
  }
}

/// ############### ProfileService ############### 
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Profile_ProfileServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Profile_ProfileServiceServerInterceptorFactoryProtocol? { get }

  func getUserInfo(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> Profile_GetUserInfoRes

  func getUserInfoByID(
    request: Profile_GetUserInfoByIDReq,
    context: GRPCAsyncServerCallContext
  ) async throws -> Profile_GetUserInfoByIDRes
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Profile_ProfileServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Profile_ProfileServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Profile_ProfileServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Profile_ProfileServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetUserInfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Profile_GetUserInfoRes>(),
        interceptors: self.interceptors?.makeGetUserInfoInterceptors() ?? [],
        wrapping: { try await self.getUserInfo(request: $0, context: $1) }
      )

    case "GetUserInfoByID":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Profile_GetUserInfoByIDReq>(),
        responseSerializer: ProtobufSerializer<Profile_GetUserInfoByIDRes>(),
        interceptors: self.interceptors?.makeGetUserInfoByIDInterceptors() ?? [],
        wrapping: { try await self.getUserInfoByID(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Profile_ProfileServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'getUserInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetUserInfoInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Profile_GetUserInfoRes>]

  /// - Returns: Interceptors to use when handling 'getUserInfoByID'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetUserInfoByIDInterceptors() -> [ServerInterceptor<Profile_GetUserInfoByIDReq, Profile_GetUserInfoByIDRes>]
}

internal enum Profile_ProfileServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ProfileService",
    fullName: "profile.ProfileService",
    methods: [
      Profile_ProfileServiceServerMetadata.Methods.getUserInfo,
      Profile_ProfileServiceServerMetadata.Methods.getUserInfoByID,
    ]
  )

  internal enum Methods {
    internal static let getUserInfo = GRPCMethodDescriptor(
      name: "GetUserInfo",
      path: "/profile.ProfileService/GetUserInfo",
      type: GRPCCallType.unary
    )

    internal static let getUserInfoByID = GRPCMethodDescriptor(
      name: "GetUserInfoByID",
      path: "/profile.ProfileService/GetUserInfoByID",
      type: GRPCCallType.unary
    )
  }
}
