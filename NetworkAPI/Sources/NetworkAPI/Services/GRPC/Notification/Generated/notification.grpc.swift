//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: notification.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// ################# NotificationService ################# 
///
/// Usage: instantiate `Notification_NotificationServiceClient`, then call methods of this protocol to make API calls.
internal protocol Notification_NotificationServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Notification_NotificationServiceClientInterceptorFactoryProtocol? { get }

  func createNotification(
    _ request: Notification_CreateNotificationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Notification_CreateNotificationRequest, Notification_NotificationResponse>

  func getNotifications(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Notification_GetNotificationsResponse>

  func streamNotifications(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?,
    handler: @escaping (Notification_NotificationResponse) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Notification_NotificationResponse>
}

extension Notification_NotificationServiceClientProtocol {
  internal var serviceName: String {
    return "notification.NotificationService"
  }

  /// Unary call to CreateNotification
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateNotification.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createNotification(
    _ request: Notification_CreateNotificationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Notification_CreateNotificationRequest, Notification_NotificationResponse> {
    return self.makeUnaryCall(
      path: Notification_NotificationServiceClientMetadata.Methods.createNotification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateNotificationInterceptors() ?? []
    )
  }

  /// Unary call to GetNotifications
  ///
  /// - Parameters:
  ///   - request: Request to send to GetNotifications.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getNotifications(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Notification_GetNotificationsResponse> {
    return self.makeUnaryCall(
      path: Notification_NotificationServiceClientMetadata.Methods.getNotifications.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetNotificationsInterceptors() ?? []
    )
  }

  /// Server streaming call to StreamNotifications
  ///
  /// - Parameters:
  ///   - request: Request to send to StreamNotifications.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func streamNotifications(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil,
    handler: @escaping (Notification_NotificationResponse) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Notification_NotificationResponse> {
    return self.makeServerStreamingCall(
      path: Notification_NotificationServiceClientMetadata.Methods.streamNotifications.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamNotificationsInterceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension Notification_NotificationServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Notification_NotificationServiceNIOClient")
internal final class Notification_NotificationServiceClient: Notification_NotificationServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Notification_NotificationServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Notification_NotificationServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the notification.NotificationService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Notification_NotificationServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Notification_NotificationServiceNIOClient: Notification_NotificationServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Notification_NotificationServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the notification.NotificationService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Notification_NotificationServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// ################# NotificationService ################# 
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Notification_NotificationServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Notification_NotificationServiceClientInterceptorFactoryProtocol? { get }

  func makeCreateNotificationCall(
    _ request: Notification_CreateNotificationRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Notification_CreateNotificationRequest, Notification_NotificationResponse>

  func makeGetNotificationsCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Notification_GetNotificationsResponse>

  func makeStreamNotificationsCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Notification_NotificationResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Notification_NotificationServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Notification_NotificationServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Notification_NotificationServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreateNotificationCall(
    _ request: Notification_CreateNotificationRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Notification_CreateNotificationRequest, Notification_NotificationResponse> {
    return self.makeAsyncUnaryCall(
      path: Notification_NotificationServiceClientMetadata.Methods.createNotification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateNotificationInterceptors() ?? []
    )
  }

  internal func makeGetNotificationsCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Notification_GetNotificationsResponse> {
    return self.makeAsyncUnaryCall(
      path: Notification_NotificationServiceClientMetadata.Methods.getNotifications.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetNotificationsInterceptors() ?? []
    )
  }

  internal func makeStreamNotificationsCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Notification_NotificationResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Notification_NotificationServiceClientMetadata.Methods.streamNotifications.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamNotificationsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Notification_NotificationServiceAsyncClientProtocol {
  internal func createNotification(
    _ request: Notification_CreateNotificationRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Notification_NotificationResponse {
    return try await self.performAsyncUnaryCall(
      path: Notification_NotificationServiceClientMetadata.Methods.createNotification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateNotificationInterceptors() ?? []
    )
  }

  internal func getNotifications(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Notification_GetNotificationsResponse {
    return try await self.performAsyncUnaryCall(
      path: Notification_NotificationServiceClientMetadata.Methods.getNotifications.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetNotificationsInterceptors() ?? []
    )
  }

  internal func streamNotifications(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Notification_NotificationResponse> {
    return self.performAsyncServerStreamingCall(
      path: Notification_NotificationServiceClientMetadata.Methods.streamNotifications.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamNotificationsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Notification_NotificationServiceAsyncClient: Notification_NotificationServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Notification_NotificationServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Notification_NotificationServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Notification_NotificationServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createNotification'.
  func makeCreateNotificationInterceptors() -> [ClientInterceptor<Notification_CreateNotificationRequest, Notification_NotificationResponse>]

  /// - Returns: Interceptors to use when invoking 'getNotifications'.
  func makeGetNotificationsInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Notification_GetNotificationsResponse>]

  /// - Returns: Interceptors to use when invoking 'streamNotifications'.
  func makeStreamNotificationsInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Notification_NotificationResponse>]
}

internal enum Notification_NotificationServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "NotificationService",
    fullName: "notification.NotificationService",
    methods: [
      Notification_NotificationServiceClientMetadata.Methods.createNotification,
      Notification_NotificationServiceClientMetadata.Methods.getNotifications,
      Notification_NotificationServiceClientMetadata.Methods.streamNotifications,
    ]
  )

  internal enum Methods {
    internal static let createNotification = GRPCMethodDescriptor(
      name: "CreateNotification",
      path: "/notification.NotificationService/CreateNotification",
      type: GRPCCallType.unary
    )

    internal static let getNotifications = GRPCMethodDescriptor(
      name: "GetNotifications",
      path: "/notification.NotificationService/GetNotifications",
      type: GRPCCallType.unary
    )

    internal static let streamNotifications = GRPCMethodDescriptor(
      name: "StreamNotifications",
      path: "/notification.NotificationService/StreamNotifications",
      type: GRPCCallType.serverStreaming
    )
  }
}

/// ################# NotificationService ################# 
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Notification_NotificationServiceProvider: CallHandlerProvider {
  var interceptors: Notification_NotificationServiceServerInterceptorFactoryProtocol? { get }

  func createNotification(request: Notification_CreateNotificationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Notification_NotificationResponse>

  func getNotifications(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Notification_GetNotificationsResponse>

  func streamNotifications(request: SwiftProtobuf.Google_Protobuf_Empty, context: StreamingResponseCallContext<Notification_NotificationResponse>) -> EventLoopFuture<GRPCStatus>
}

extension Notification_NotificationServiceProvider {
  internal var serviceName: Substring {
    return Notification_NotificationServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateNotification":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Notification_CreateNotificationRequest>(),
        responseSerializer: ProtobufSerializer<Notification_NotificationResponse>(),
        interceptors: self.interceptors?.makeCreateNotificationInterceptors() ?? [],
        userFunction: self.createNotification(request:context:)
      )

    case "GetNotifications":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Notification_GetNotificationsResponse>(),
        interceptors: self.interceptors?.makeGetNotificationsInterceptors() ?? [],
        userFunction: self.getNotifications(request:context:)
      )

    case "StreamNotifications":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Notification_NotificationResponse>(),
        interceptors: self.interceptors?.makeStreamNotificationsInterceptors() ?? [],
        userFunction: self.streamNotifications(request:context:)
      )

    default:
      return nil
    }
  }
}

/// ################# NotificationService ################# 
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Notification_NotificationServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Notification_NotificationServiceServerInterceptorFactoryProtocol? { get }

  func createNotification(
    request: Notification_CreateNotificationRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Notification_NotificationResponse

  func getNotifications(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> Notification_GetNotificationsResponse

  func streamNotifications(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    responseStream: GRPCAsyncResponseStreamWriter<Notification_NotificationResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Notification_NotificationServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Notification_NotificationServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Notification_NotificationServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Notification_NotificationServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateNotification":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Notification_CreateNotificationRequest>(),
        responseSerializer: ProtobufSerializer<Notification_NotificationResponse>(),
        interceptors: self.interceptors?.makeCreateNotificationInterceptors() ?? [],
        wrapping: { try await self.createNotification(request: $0, context: $1) }
      )

    case "GetNotifications":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Notification_GetNotificationsResponse>(),
        interceptors: self.interceptors?.makeGetNotificationsInterceptors() ?? [],
        wrapping: { try await self.getNotifications(request: $0, context: $1) }
      )

    case "StreamNotifications":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Notification_NotificationResponse>(),
        interceptors: self.interceptors?.makeStreamNotificationsInterceptors() ?? [],
        wrapping: { try await self.streamNotifications(request: $0, responseStream: $1, context: $2) }
      )

    default:
      return nil
    }
  }
}

internal protocol Notification_NotificationServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'createNotification'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateNotificationInterceptors() -> [ServerInterceptor<Notification_CreateNotificationRequest, Notification_NotificationResponse>]

  /// - Returns: Interceptors to use when handling 'getNotifications'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetNotificationsInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Notification_GetNotificationsResponse>]

  /// - Returns: Interceptors to use when handling 'streamNotifications'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStreamNotificationsInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Notification_NotificationResponse>]
}

internal enum Notification_NotificationServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "NotificationService",
    fullName: "notification.NotificationService",
    methods: [
      Notification_NotificationServiceServerMetadata.Methods.createNotification,
      Notification_NotificationServiceServerMetadata.Methods.getNotifications,
      Notification_NotificationServiceServerMetadata.Methods.streamNotifications,
    ]
  )

  internal enum Methods {
    internal static let createNotification = GRPCMethodDescriptor(
      name: "CreateNotification",
      path: "/notification.NotificationService/CreateNotification",
      type: GRPCCallType.unary
    )

    internal static let getNotifications = GRPCMethodDescriptor(
      name: "GetNotifications",
      path: "/notification.NotificationService/GetNotifications",
      type: GRPCCallType.unary
    )

    internal static let streamNotifications = GRPCMethodDescriptor(
      name: "StreamNotifications",
      path: "/notification.NotificationService/StreamNotifications",
      type: GRPCCallType.serverStreaming
    )
  }
}
