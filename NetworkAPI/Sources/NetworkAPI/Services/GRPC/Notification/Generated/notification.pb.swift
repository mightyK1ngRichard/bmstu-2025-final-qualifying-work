// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: notification.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Тип уведомления
enum Notification_NotificationKind: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int

  /// Личное сообщение
  case message // = 0

  /// Отзыв
  case feedback // = 1

  /// Обновление по заказу
  case orderUpdate // = 2

  /// Системное уведомление
  case system // = 3

  /// Рекламное уведомление
  case promo // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .message
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .message
    case 1: self = .feedback
    case 2: self = .orderUpdate
    case 3: self = .system
    case 4: self = .promo
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .message: return 0
    case .feedback: return 1
    case .orderUpdate: return 2
    case .system: return 3
    case .promo: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Notification_NotificationKind] = [
    .message,
    .feedback,
    .orderUpdate,
    .system,
    .promo,
  ]

}

/// ################# CreateNotificationRequest ################# 
struct Notification_CreateNotificationRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var message: String = String()

  var cakeID: String {
    get {return _cakeID ?? String()}
    set {_cakeID = newValue}
  }
  /// Returns true if `cakeID` has been explicitly set.
  var hasCakeID: Bool {return self._cakeID != nil}
  /// Clears the value of `cakeID`. Subsequent reads from it will return its default value.
  mutating func clearCakeID() {self._cakeID = nil}

  var recipientID: String = String()

  var kind: Notification_NotificationKind = .message

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _cakeID: String? = nil
}

struct Notification_NotificationResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var notification: Notification_Notification {
    get {return _notification ?? Notification_Notification()}
    set {_notification = newValue}
  }
  /// Returns true if `notification` has been explicitly set.
  var hasNotification: Bool {return self._notification != nil}
  /// Clears the value of `notification`. Subsequent reads from it will return its default value.
  mutating func clearNotification() {self._notification = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _notification: Notification_Notification? = nil
}

/// ################# GetNotifications ################# 
struct Notification_GetNotificationsResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var notifications: [Notification_Notification] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Модель уведомления
struct Notification_Notification: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Код уведомления
  var id: String = String()

  /// Заголовок уведомления
  var title: String = String()

  /// Текст уведомления
  var message: String = String()

  /// Дата и время создания
  var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  mutating func clearCreatedAt() {self._createdAt = nil}

  /// Код отправителя уведомления
  var senderID: String = String()

  /// Тип уведомления
  var kind: Notification_NotificationKind = .message

  /// Код торта
  var cakeID: String {
    get {return _cakeID ?? String()}
    set {_cakeID = newValue}
  }
  /// Returns true if `cakeID` has been explicitly set.
  var hasCakeID: Bool {return self._cakeID != nil}
  /// Clears the value of `cakeID`. Subsequent reads from it will return its default value.
  mutating func clearCakeID() {self._cakeID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _cakeID: String? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "notification"

extension Notification_NotificationKind: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MESSAGE"),
    1: .same(proto: "FEEDBACK"),
    2: .same(proto: "ORDER_UPDATE"),
    3: .same(proto: "SYSTEM"),
    4: .same(proto: "PROMO"),
  ]
}

extension Notification_CreateNotificationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateNotificationRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "title"),
    3: .same(proto: "message"),
    4: .same(proto: "cakeID"),
    5: .same(proto: "recipientID"),
    6: .same(proto: "kind"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._cakeID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.recipientID) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.kind) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 3)
    }
    try { if let v = self._cakeID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    if !self.recipientID.isEmpty {
      try visitor.visitSingularStringField(value: self.recipientID, fieldNumber: 5)
    }
    if self.kind != .message {
      try visitor.visitSingularEnumField(value: self.kind, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Notification_CreateNotificationRequest, rhs: Notification_CreateNotificationRequest) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.message != rhs.message {return false}
    if lhs._cakeID != rhs._cakeID {return false}
    if lhs.recipientID != rhs.recipientID {return false}
    if lhs.kind != rhs.kind {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Notification_NotificationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NotificationResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "notification"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._notification) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._notification {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Notification_NotificationResponse, rhs: Notification_NotificationResponse) -> Bool {
    if lhs._notification != rhs._notification {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Notification_GetNotificationsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetNotificationsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "notifications"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.notifications) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.notifications.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.notifications, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Notification_GetNotificationsResponse, rhs: Notification_GetNotificationsResponse) -> Bool {
    if lhs.notifications != rhs.notifications {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Notification_Notification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Notification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .same(proto: "message"),
    4: .same(proto: "createdAt"),
    5: .same(proto: "senderID"),
    6: .same(proto: "kind"),
    7: .same(proto: "cakeID"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.senderID) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.kind) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self._cakeID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 3)
    }
    try { if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.senderID.isEmpty {
      try visitor.visitSingularStringField(value: self.senderID, fieldNumber: 5)
    }
    if self.kind != .message {
      try visitor.visitSingularEnumField(value: self.kind, fieldNumber: 6)
    }
    try { if let v = self._cakeID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Notification_Notification, rhs: Notification_Notification) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.title != rhs.title {return false}
    if lhs.message != rhs.message {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs.senderID != rhs.senderID {return false}
    if lhs.kind != rhs.kind {return false}
    if lhs._cakeID != rhs._cakeID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
