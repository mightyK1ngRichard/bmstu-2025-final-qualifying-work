//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: feedback.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// ################# ReviewService ################# 
///
/// Usage: instantiate `Feedback_ReviewServiceClient`, then call methods of this protocol to make API calls.
internal protocol Feedback_ReviewServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Feedback_ReviewServiceClientInterceptorFactoryProtocol? { get }

  func addFeedback(
    _ request: Feedback_AddFeedbackRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Feedback_AddFeedbackRequest, Feedback_AddFeedbackResponse>

  func productFeedbacks(
    _ request: Feedback_ProductFeedbacksRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Feedback_ProductFeedbacksRequest, Feedback_ProductFeedbacksResponse>
}

extension Feedback_ReviewServiceClientProtocol {
  internal var serviceName: String {
    return "feedback.ReviewService"
  }

  /// Unary call to AddFeedback
  ///
  /// - Parameters:
  ///   - request: Request to send to AddFeedback.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addFeedback(
    _ request: Feedback_AddFeedbackRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Feedback_AddFeedbackRequest, Feedback_AddFeedbackResponse> {
    return self.makeUnaryCall(
      path: Feedback_ReviewServiceClientMetadata.Methods.addFeedback.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddFeedbackInterceptors() ?? []
    )
  }

  /// Unary call to ProductFeedbacks
  ///
  /// - Parameters:
  ///   - request: Request to send to ProductFeedbacks.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func productFeedbacks(
    _ request: Feedback_ProductFeedbacksRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Feedback_ProductFeedbacksRequest, Feedback_ProductFeedbacksResponse> {
    return self.makeUnaryCall(
      path: Feedback_ReviewServiceClientMetadata.Methods.productFeedbacks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProductFeedbacksInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Feedback_ReviewServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Feedback_ReviewServiceNIOClient")
internal final class Feedback_ReviewServiceClient: Feedback_ReviewServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Feedback_ReviewServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Feedback_ReviewServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the feedback.ReviewService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Feedback_ReviewServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Feedback_ReviewServiceNIOClient: Feedback_ReviewServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Feedback_ReviewServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the feedback.ReviewService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Feedback_ReviewServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// ################# ReviewService ################# 
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Feedback_ReviewServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Feedback_ReviewServiceClientInterceptorFactoryProtocol? { get }

  func makeAddFeedbackCall(
    _ request: Feedback_AddFeedbackRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Feedback_AddFeedbackRequest, Feedback_AddFeedbackResponse>

  func makeProductFeedbacksCall(
    _ request: Feedback_ProductFeedbacksRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Feedback_ProductFeedbacksRequest, Feedback_ProductFeedbacksResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Feedback_ReviewServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Feedback_ReviewServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Feedback_ReviewServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeAddFeedbackCall(
    _ request: Feedback_AddFeedbackRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Feedback_AddFeedbackRequest, Feedback_AddFeedbackResponse> {
    return self.makeAsyncUnaryCall(
      path: Feedback_ReviewServiceClientMetadata.Methods.addFeedback.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddFeedbackInterceptors() ?? []
    )
  }

  internal func makeProductFeedbacksCall(
    _ request: Feedback_ProductFeedbacksRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Feedback_ProductFeedbacksRequest, Feedback_ProductFeedbacksResponse> {
    return self.makeAsyncUnaryCall(
      path: Feedback_ReviewServiceClientMetadata.Methods.productFeedbacks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProductFeedbacksInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Feedback_ReviewServiceAsyncClientProtocol {
  internal func addFeedback(
    _ request: Feedback_AddFeedbackRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Feedback_AddFeedbackResponse {
    return try await self.performAsyncUnaryCall(
      path: Feedback_ReviewServiceClientMetadata.Methods.addFeedback.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddFeedbackInterceptors() ?? []
    )
  }

  internal func productFeedbacks(
    _ request: Feedback_ProductFeedbacksRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Feedback_ProductFeedbacksResponse {
    return try await self.performAsyncUnaryCall(
      path: Feedback_ReviewServiceClientMetadata.Methods.productFeedbacks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProductFeedbacksInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Feedback_ReviewServiceAsyncClient: Feedback_ReviewServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Feedback_ReviewServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Feedback_ReviewServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Feedback_ReviewServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'addFeedback'.
  func makeAddFeedbackInterceptors() -> [ClientInterceptor<Feedback_AddFeedbackRequest, Feedback_AddFeedbackResponse>]

  /// - Returns: Interceptors to use when invoking 'productFeedbacks'.
  func makeProductFeedbacksInterceptors() -> [ClientInterceptor<Feedback_ProductFeedbacksRequest, Feedback_ProductFeedbacksResponse>]
}

internal enum Feedback_ReviewServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ReviewService",
    fullName: "feedback.ReviewService",
    methods: [
      Feedback_ReviewServiceClientMetadata.Methods.addFeedback,
      Feedback_ReviewServiceClientMetadata.Methods.productFeedbacks,
    ]
  )

  internal enum Methods {
    internal static let addFeedback = GRPCMethodDescriptor(
      name: "AddFeedback",
      path: "/feedback.ReviewService/AddFeedback",
      type: GRPCCallType.unary
    )

    internal static let productFeedbacks = GRPCMethodDescriptor(
      name: "ProductFeedbacks",
      path: "/feedback.ReviewService/ProductFeedbacks",
      type: GRPCCallType.unary
    )
  }
}

/// ################# ReviewService ################# 
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Feedback_ReviewServiceProvider: CallHandlerProvider {
  var interceptors: Feedback_ReviewServiceServerInterceptorFactoryProtocol? { get }

  func addFeedback(request: Feedback_AddFeedbackRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Feedback_AddFeedbackResponse>

  func productFeedbacks(request: Feedback_ProductFeedbacksRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Feedback_ProductFeedbacksResponse>
}

extension Feedback_ReviewServiceProvider {
  internal var serviceName: Substring {
    return Feedback_ReviewServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "AddFeedback":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Feedback_AddFeedbackRequest>(),
        responseSerializer: ProtobufSerializer<Feedback_AddFeedbackResponse>(),
        interceptors: self.interceptors?.makeAddFeedbackInterceptors() ?? [],
        userFunction: self.addFeedback(request:context:)
      )

    case "ProductFeedbacks":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Feedback_ProductFeedbacksRequest>(),
        responseSerializer: ProtobufSerializer<Feedback_ProductFeedbacksResponse>(),
        interceptors: self.interceptors?.makeProductFeedbacksInterceptors() ?? [],
        userFunction: self.productFeedbacks(request:context:)
      )

    default:
      return nil
    }
  }
}

/// ################# ReviewService ################# 
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Feedback_ReviewServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Feedback_ReviewServiceServerInterceptorFactoryProtocol? { get }

  func addFeedback(
    request: Feedback_AddFeedbackRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Feedback_AddFeedbackResponse

  func productFeedbacks(
    request: Feedback_ProductFeedbacksRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Feedback_ProductFeedbacksResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Feedback_ReviewServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Feedback_ReviewServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Feedback_ReviewServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Feedback_ReviewServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "AddFeedback":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Feedback_AddFeedbackRequest>(),
        responseSerializer: ProtobufSerializer<Feedback_AddFeedbackResponse>(),
        interceptors: self.interceptors?.makeAddFeedbackInterceptors() ?? [],
        wrapping: { try await self.addFeedback(request: $0, context: $1) }
      )

    case "ProductFeedbacks":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Feedback_ProductFeedbacksRequest>(),
        responseSerializer: ProtobufSerializer<Feedback_ProductFeedbacksResponse>(),
        interceptors: self.interceptors?.makeProductFeedbacksInterceptors() ?? [],
        wrapping: { try await self.productFeedbacks(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Feedback_ReviewServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'addFeedback'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddFeedbackInterceptors() -> [ServerInterceptor<Feedback_AddFeedbackRequest, Feedback_AddFeedbackResponse>]

  /// - Returns: Interceptors to use when handling 'productFeedbacks'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProductFeedbacksInterceptors() -> [ServerInterceptor<Feedback_ProductFeedbacksRequest, Feedback_ProductFeedbacksResponse>]
}

internal enum Feedback_ReviewServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ReviewService",
    fullName: "feedback.ReviewService",
    methods: [
      Feedback_ReviewServiceServerMetadata.Methods.addFeedback,
      Feedback_ReviewServiceServerMetadata.Methods.productFeedbacks,
    ]
  )

  internal enum Methods {
    internal static let addFeedback = GRPCMethodDescriptor(
      name: "AddFeedback",
      path: "/feedback.ReviewService/AddFeedback",
      type: GRPCCallType.unary
    )

    internal static let productFeedbacks = GRPCMethodDescriptor(
      name: "ProductFeedbacks",
      path: "/feedback.ReviewService/ProductFeedbacks",
      type: GRPCCallType.unary
    )
  }
}
